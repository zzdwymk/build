name: Kali Linux VM 自动构建（纯主机环境）

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ARCH: "amd64"
  BRANCH: "kali-rolling"
  VARIANT: "generic"  # 与配方文件匹配的变体
  FORMAT: "raw"
  DESKTOP: "xfce"
  SIZE: "15"  # 磁盘大小(GB)
  TOOLSET: "minimal"
  USER_PASS: "kali:kali"
  TIMEZONE: "Asia/Shanghai"
  OUTPUT_DIR: "artifacts"
  DEPLOY_DIR: "releases"
  # QEMU模拟配置
  QEMU_CPU: "max"
  QEMU_MEM: "4G"
  # 构建脚本仓库及配方文件配置
  BUILD_SCRIPT_REPO: "https://gitlab.com/kalilinux/build-scripts/kali-vm.git"
  BUILD_SCRIPT_DIR: "kali-vm"
  RECIPE_FILE: "image.yaml"  # 显式指定配方文件（根据目录内容选择存在的.yaml文件）

jobs:
  build:
    name: 纯主机环境构建 Kali VM 镜像
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    timeout-minutes: 180

    steps:
      - name: 拉取主代码仓库
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 获取Kali VM构建脚本及配方文件
        run: |
          if [ ! -d "${BUILD_SCRIPT_DIR}" ]; then
            echo "克隆构建脚本仓库..."
            git clone $BUILD_SCRIPT_REPO $BUILD_SCRIPT_DIR
          fi
          
          # 验证关键文件
          if [ ! -f "${BUILD_SCRIPT_DIR}/build.sh" ]; then
            echo "❌ 未找到${BUILD_SCRIPT_DIR}/build.sh"
            exit 1
          fi
          
          # 验证配方文件存在
          if [ ! -f "${BUILD_SCRIPT_DIR}/${RECIPE_FILE}" ]; then
            echo "❌ 未找到配方文件${BUILD_SCRIPT_DIR}/${RECIPE_FILE}"
            echo "当前目录下的配方文件："
            find $BUILD_SCRIPT_DIR -name "*.yaml"
            exit 1
          fi
          
          echo "BUILD_SCRIPT_PATH=${BUILD_SCRIPT_DIR}/build.sh" >> $GITHUB_ENV
          echo "确认构建脚本路径：${{ env.BUILD_SCRIPT_PATH }}"
          echo "确认配方文件路径：${BUILD_SCRIPT_DIR}/${RECIPE_FILE}"

      - name: 安装主机环境依赖
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get remove -y containerd.io containerd docker.io docker-engine docker-ce
          sudo apt-get autoremove -y
          
          sudo apt-get install -y \
            debos \
            dosfstools \
            p7zip-full \
            qemu-system-x86 \
            qemu-utils \
            zerofree \
            git \
            curl \
            wget \
            unzip \
            parted \
            kpartx \
            debootstrap \
            squashfs-tools \
            xz-utils \
            libguestfs-tools
          
          qemu-system-x86_64 --version
          sudo chmod 666 /dev/null /dev/zero /dev/random /dev/urandom

      - name: 配置Debos强制软件模拟
        run: |
          mkdir -p ~/.config/debos
          cat > ~/.config/debos/config.yaml << EOF
          qemu:
            acceleration: none
            cpu: $QEMU_CPU
            memory: $QEMU_MEM
            extra-args: "-no-kvm -machine q35,accel=tcg -smp 2"
          EOF
          cat ~/.config/debos/config.yaml

      - name: 主机环境直接构建镜像（显式指定配方文件）
        run: |
          cd $BUILD_SCRIPT_DIR
          echo "当前工作目录: $(pwd)"
          echo "配方文件详情："
          ls -la $RECIPE_FILE
          
          chmod +x build.sh
          ulimit -n 4096
          
          # 关键修复：通过 -R 参数显式指定配方文件（根据build.sh的逻辑调整参数）
          # 若-R不生效，尝试直接将配方文件作为参数传递（部分版本支持）
          ./build.sh \
            -a $ARCH \
            -b $BRANCH \
            -v $VARIANT \
            -f $FORMAT \
            -D $DESKTOP \
            -s $SIZE \
            -T $TOOLSET \
            -U $USER_PASS \
            -Z $TIMEZONE \
            -R $RECIPE_FILE \  # 显式指定配方文件路径
            -- \
            --artifactdir ../$OUTPUT_DIR \
            --memory $QEMU_MEM

          # 验证构建结果
          cd ..
          if [ -z "$(ls $OUTPUT_DIR/*.$FORMAT 2>/dev/null)" ]; then
            echo "❌ 镜像构建失败，未找到产物文件"
            exit 1
          else
            echo "✅ 镜像构建成功，产物列表："
            ls -lh $OUTPUT_DIR
          fi

      - name: 压缩镜像产物
        run: |
          mkdir -p $DEPLOY_DIR
          for file in $OUTPUT_DIR/*.$FORMAT; do
            filename=$(basename "$file")
            7z a -t7z -mmt=4 "$DEPLOY_DIR/${filename}.7z" "$file" -mx=9
            echo "压缩完成：$DEPLOY_DIR/${filename}.7z"
          done
          cd $DEPLOY_DIR
          sha256sum * > SHA256SUMS
          cd ..

      - name: 上传产物到 GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kali-vm-images
          path: ${{ env.DEPLOY_DIR }}/*
          retention-days: 7

      - name: 创建 GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          name: "Kali VM 纯主机构建 ${{ github.sha }}"
          tag_name: "native-build-${{ github.sha }}"
          body: |
            纯主机环境自动构建产物（基于 commit: ${{ github.sha }}）
            - 架构：${{ env.ARCH }}
            - 桌面环境：${{ env.DESKTOP }}
            - 格式：${{ env.FORMAT }}
          files: ${{ env.DEPLOY_DIR }}/*
          draft: false
          prerelease: true
